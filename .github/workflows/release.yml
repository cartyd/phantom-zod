name: Release

on:
  push:
    branches:
      - main  # Triggers on every push/merge to main

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need previous commit to compare
        
    - name: Check if version changed
      id: check
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        # Check if this is the first commit (no previous version to compare)
        if git show HEAD~1:package.json 2>/dev/null; then
          PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
        else
          PREVIOUS_VERSION="0.0.0"  # First commit case
        fi
        
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "✅ Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "ℹ️ Version unchanged: $CURRENT_VERSION"
        fi

  release:
    name: Build & Publish
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test
      
    - name: Build package
      run: npm run build
      
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create git tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag ${{ needs.check-version.outputs.new-version }}
        git push origin ${{ needs.check-version.outputs.new-version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.check-version.outputs.new-version }}
        release_name: Release ${{ needs.check-version.outputs.new-version }}
        draft: false
        prerelease: false
